class Board:
    def __init__(self):
        self.board = [["   " for _ in range(15)] for _ in range(15)]
        self.add_cells()
        self.board[7][7] = " X "

    def add_cells(self):
        TRIPLE_WORD_SCORE = [(0, 0), (7, 0), (14, 0), (0, 7), (14, 7), (0, 14), (7, 14), (14, 14)]
        DOUBLE_WORD_SCORE = [(1, 1), (2, 2), (3, 3), (4, 4), (1, 13), (2, 12), (3, 11), (4, 10),
                             (13, 1), (12, 2), (11, 3), (10, 4), (13, 13), (12, 12), (11, 11), (10, 10)]
        TRIPLE_LETTER_SCORE = [(1, 5), (1, 9), (5, 1), (5, 5), (5, 9), (5, 13), (9, 1), (9, 5),
                               (9, 9), (9, 13), (13, 5), (13, 9)]
        DOUBLE_LETTER_SCORE = [(0, 3), (0, 11), (2, 6), (2, 8), (3, 0), (3, 7), (3, 14), (6, 2),
                               (6, 6), (6, 8), (6, 12), (7, 3), (7, 11), (8, 2), (8, 6), (8, 8),
                               (8, 12), (11, 0), (11, 7), (11, 14), (12, 6), (12, 8), (14, 3), (14, 11)]

        for co in TRIPLE_WORD_SCORE:
            self.board[co[0]][co[1]] = 'TWS'
        for co in DOUBLE_WORD_SCORE:
            self.board[co[0]][co[1]] = 'DWS'
        for co in TRIPLE_LETTER_SCORE:
            self.board[co[0]][co[1]] = 'TLS'
        for co in DOUBLE_LETTER_SCORE:
            self.board[co[0]][co[1]] = 'DLS'

    def get_board(self):
        board_str = "   |  " + "  |  ".join(str(item) for item in range(10)) + "  | " + "  | ".join(str(item) for item in range(10, 15)) + " |"
        board_str += "\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n"
    
        formatted_rows = []
        for i, row in enumerate(self.board):
            row_str = " | ".join(str(item) for item in row)
            if i < 10:
                formatted_rows.append(f"{i}  | {row_str} |")
            else:
                formatted_rows.append(f"{i} | {row_str} |")
    
        row_separator = "\n   |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _|\n"
        board_str += row_separator.join(formatted_rows)
        board_str += "\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
        return board_str
        
        

    def update_board(self, word, orientation, x, y):
        if orientation == "horizontal":
            for i, char in enumerate(word):
                self.board[y][x + i] = f" {char} "
        elif orientation == "vertical":
            for i, char in enumerate(word):
                self.board[y + i][x] = f" {char} "
        #Orientation check Changed  "horizontal" and "vertical" to correctly differentiate between the two orientations.

        #Indexing Correction: Adjusted the indexing in both (horizontal and vertical) to correctly place each character of the word on the board.
    
    
    
    def place_holder(self, word, location, direction, player):
        special_cells = []
        direction = direction.lower()
        word = word.upper()
        if direction == "right":
            for i in range(len(word)):
                if self.board[location[0]][location[1] + i] != "  ":
                    special_cells.append((word[i], self.board[location[1] + i]))
                self.board[location[0]][location[1] + 1] = "" + word[i] + ""
                
        
        elif direction == "down":
            for i in range(len(word)):
                if self.board[location[0] + i][location[1]] != "   ":
                        special_cells.append((word[i], self.board[location[0] + i][location[1]]))
                self.board[location[0] + i][location[1]] = " " + word[i] + " "
                
        #checks if the current cell is not if yes it stores the character to the special cell
            for letter in word:
                for tile in player.get_rack_arr():
                    if tile.get_letter() == letter:
                        player.rack.remove_fromrack(tile)
            player.rack.refill_rack()
        
        
        #Removes the matching tile from the player's rack.
        #Calls refill_rack method to refill the player's rack with new tiles from the bag.